import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.nn.parallel
import torch.optim as optim
import torch.utils.data
from torch.autograd import Variable

films = pd.read_csv('ml-1m/films.dat', sep = '::', header = None, engine = 'python', encoding = 'latin-1')
users = pd.read_csv('ml-1m/users.dat', sep = '::', header = None, engine = 'python', encoding = 'latin-1')
ratings = pd.read_csv('ml-1m/ratings.dat', sep = '::', header = None, engine = 'python', encoding = 'latin-1')

##create training and test set data
# here only take u1.base but there are another u2 u3 u4 u5 base files
training_set = pd.read_csv('ml-100k/u1.base', delimiter = '\t', header = None)
print(training_set.head(5))
##transformation it to array
training_set = np.array(training_set, dtype = 'int')

training_set.shape

test_set = pd.read_csv('ml-100k/u1.test', delimiter = '\t', header = None)
##transformation it to array
test_set = np.array(test_set, dtype = 'int')

#take max users id in train and test data
nb_users = int(max(max(training_set[:,0]), max(test_set[:,0])))
nb_films = int(max(max(training_set[:,1]), max(test_set[:,1])))
print('Num of users: ', nb_users, '\nNum of films: ', nb_films)

def transformation(data):
    new_data = []
    for id_users in range(1, nb_users + 1):
        ##id of films that is rated by current users
        id_films = data[:,1][data[:,0] == id_users]
        
        ##rate of films that is given by current user
        id_ratings = data[:,2][data[:,0] == id_users]
        
        #inialize ratings for all films
        #set 0 for films that are not rated by current users
        ratings = np.zeros(nb_films)
        #movie id starts from 1, 1st movie will be 1st element in rating with index as 0
        ratings[id_films - 1] = id_ratings
        new_data.append(list(ratings))
    return new_data
	
training_set = transformation(training_set)
test_set = transformation(test_set)

training_set = torch.FloatTensor(training_set)
test_set = torch.FloatTensor(test_set)

class RBM(nn.Module):
    def __init__(self, ):
        #allow to inhert all classes and methods of parent class
        super(RBM, self).__init__()
        #num of features from input: num of films, 20 nodes in first hidden layer
        self.fc1 = nn.Linear(nb_films, 20)
        self.fc2 = nn.Linear(20, 10)
        #start to decoding
        self.fc3 = nn.Linear(10, 20)
        self.fc4 = nn.Linear(20, nb_films)
        self.activation = nn.Sigmoid()
        
    #input vector (films rating) for a specific users
    def forward(self, x):
        #apply activaton fuc on first encoding layer
        #return first encoded vector
        x = self.activation(self.fc1(x))
        x = self.activation(self.fc2(x))
        x = self.activation(self.fc3(x))
        #no need to activate the vector
        #output the reconstrctured vector
        x = self.fc4(x)
        return x
		
rbm = RBM()
#Create loss fucn object
criterion = nn.MSELoss()
#create optimizer object
#parameters of all auto-encoders defined in the class
optimizer = optim.RMSprop(rbm.parameters(), lr = 0.01, weight_decay = 0.5)

# #train the RBM using pytorch only codes

#loop all epochs
nb_epoch = 200
for epoch in range(1, nb_epoch + 1):
    train_loss = 0
    #exclude users who did not rate any films
    #define a float
    s = 0.
    #loop through each users
    for id_user in range(nb_users):
        #get all rating for current user from training_set
        #nn does not take single dimension vector, so add a batch dimension
        #a batch of sinlge inptu vector, update weigths after each vector
        input = Variable(training_set[id_user]).unsqueeze(0)
        #create target by copying input
        target = input.clone()
        #only look at users who rated at least 1 movie
        if torch.sum(target.data > 0) > 0:
            #get output from the network, a vector of predicted value
            output = rbm(input)
            #do not compute gradient with respect to target
            target.require_grad = False
            #don't account the output whose initial input is 0
            output[target == 0] = 0
            loss = criterion(output, target)
            #make demonitor is not zero, to add a small number
            mean_corrector = nb_films / float(torch.sum(target.data>0) + 1e-10)
            #backward method to determine which direction 
            loss.backward()
            #access the data of loss object .data[0]
            #adjust the loss to compute relevant mean for all films for current user
            train_loss += np.sqrt(loss.data * mean_corrector)
            s += 1.
            #apply optimizer to update weights, decides the amount of weight udpates
            optimizer.step()
    if epoch % 10 == 0:
        print('epoch: '+str(epoch) + ' loss: ' + str(train_loss/s))
